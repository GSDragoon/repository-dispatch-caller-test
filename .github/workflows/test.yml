name: Test-Caller

# https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#repository_dispatch
on:
  workflow_dispatch:

permissions:
  checks: write
  actions: read
  contents: read

env:
  REPO_OWNER: GSDragoon
  REPO_NAME: repository-dispatch-test
  WORKFLOW_ID: 148897429 # https://api.github.com/repos/GSDragoon/repository-dispatch-test/actions/workflows

jobs:
  test-caller:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    concurrency:
      group: Static
      cancel-in-progress: false
    steps:

      # https://docs.github.com/en/rest/repos/repos#create-a-repository-dispatch-event
      - name: 'Execute Remote Workflow'
        run: |
          curl -L \
            -X POST \
            -H 'Accept: application/vnd.github+json' \
            -H 'Authorization: Bearer ${{ secrets.REPO_DISPATCH_PAT }}' \
            -H 'X-GitHub-Api-Version: 2022-11-28' \
            https://api.github.com/repos/${{ env.REPO_OWNER }}/${{ env.REPO_NAME }}/dispatches \
            -d '{"event_type":"test-type-1","client_payload":{"value1":false,"value2":"foobar"}}' \
            --no-progress-meter --show-error --fail-with-body \
            -w 'Response Code (204 is expected): %{response_code}\n'

      # https://docs.github.com/en/rest/actions/workflow-runs#list-workflow-runs-for-a-repository
      # https://github.com/orgs/community/discussions/24918
      # https://api.github.com/repos/GSDragoon/repository-dispatch-test/actions/runs?event=repository_dispatch&actor=GSDragoon&exclude_pull_requests=true
      - name: 'Wait for Remote Workflow to Complete'
        timeout-minutes: 5
        run: |
          echo 'Waiting 30 seconds before polling workflow runs...'
          sleep 30

          while true; do
            response=$(curl -L \
              -X GET \
              -H 'Accept: application/vnd.github+json' \
              -H 'Authorization: Bearer ${{ secrets.REPO_DISPATCH_PAT }}' \
              -H 'X-GitHub-Api-Version: 2022-11-28' \
              'https://api.github.com/repos/${{ env.REPO_OWNER }}/${{ env.REPO_NAME }}/actions/runs?event=repository_dispatch&actor=GSDragoon&exclude_pull_requests=true&per_page=5' \
              --no-progress-meter --show-error --fail-with-body)

            # Get the latest run, don't assume the api returns the runs in order and go off the run number
            # Filter only on specific workflows, by ID, because the repo will run other workflows too
            latest_run=$(echo "${response}" | jq '.workflow_runs | map(select(.workflow_id == ${{ env.WORKFLOW_ID }})) | max_by(.run_number)')

            id=$(echo "${latest_run}" | jq -r '.id')
            run_number=$(echo "${latest_run}" | jq -r '.run_number')
            status=$(echo "${latest_run}" | jq -r '.status')
            conclusion=$(echo "${latest_run}" | jq -r '.conclusion')
            url=$(echo "${latest_run}" | jq -r '.html_url')
            html_url=$(echo "${latest_run}" | jq -r '.html_url')

            echo "ID: ${id}"
            echo "Run Number: ${run_number}"
            echo "Status: ${status}"
            echo "Conclusion: ${conclusion}"
            echo "URL: ${url}"
            echo "HTML URL: ${html_url}"

            if [ "${status}" = "completed" ]; then
              echo 'Remote Workflow Completed.'
              # TODO: Add output to GitHub Summary
              # https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions#adding-a-job-summary

              if [ "${conclusion}" = "success" ]; then
                echo 'Remote Workflow Succeeded.'
                exit 0
              fi

              echo 'Remote Workflow Failed.'
              exit 1
            fi
            echo 'Remote Workflow Still Running. Waiting 15 seconds to check again...'
            sleep 15
          done

          echo 'Remote Workflow Timed Out.'
          exit 1
