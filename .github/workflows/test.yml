name: Test-Caller

# https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#repository_dispatch
on:
  workflow_dispatch:
    inputs:
      event_type:
        description: 'The type of event to trigger the remote workflow. (test-type-1 or test-type-2)'
        required: true
        default: 'test-type-1'
        type: choice
        options: ['test-type-1', 'test-type-2']
      value1:
        description: 'The first value to send to the remote workflow.'
        required: true
        default: 'false'
      value2:
        description: 'The second value to send to the remote workflow.'
        required: true
        default: 'foobar'

permissions:
  checks: write
  actions: read
  contents: read

env:
  REPO_OWNER: GSDragoon
  REPO_NAME: repository-dispatch-test
  WORKFLOW_ID: 148897429 # https://api.github.com/repos/GSDragoon/repository-dispatch-test/actions/workflows

jobs:
  test-caller:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    #concurrency:
    #  group: Static
    #  cancel-in-progress: false
    steps:

      # https://docs.github.com/en/rest/repos/repos#create-a-repository-dispatch-event
      - name: Execute Remote Workflow
        run: |
          curl -L \
            -X POST \
            -H 'Accept: application/vnd.github+json' \
            -H 'Authorization: Bearer ${{ secrets.REPO_DISPATCH_PAT }}' \
            -H 'X-GitHub-Api-Version: 2022-11-28' \
            https://api.github.com/repos/${{ env.REPO_OWNER }}/${{ env.REPO_NAME }}/dispatches \
            -d '{"event_type":"${{ inputs.event_type }}","client_payload":{"value1":"${{ inputs.value1 }}","value2":"${{ inputs.value2 }}"}}' \
            --no-progress-meter --show-error --fail-with-body \
            -w 'Response Code (204 is expected): %{response_code}\n'

      # https://docs.github.com/en/rest/actions/workflow-runs#list-workflow-runs-for-a-repository
      # https://github.com/orgs/community/discussions/24918
      # https://api.github.com/repos/GSDragoon/repository-dispatch-test/actions/runs?event=repository_dispatch&actor=GSDragoon&exclude_pull_requests=true
      # https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/collaborating-on-repositories-with-code-quality-features/about-status-checks#check-statuses-and-conclusions
      - name: Wait for Remote Workflow to Complete
        id: wait-for-remote-workflow
        timeout-minutes: 5
        run: |
          echo 'Waiting 30 seconds before polling workflow runs...'
          sleep 30

          while true; do
            response=$(curl -L \
              -X GET \
              -H 'Accept: application/vnd.github+json' \
              -H 'Authorization: Bearer ${{ secrets.REPO_DISPATCH_PAT }}' \
              -H 'X-GitHub-Api-Version: 2022-11-28' \
              'https://api.github.com/repos/${{ env.REPO_OWNER }}/${{ env.REPO_NAME }}/actions/runs?event=repository_dispatch&actor=GSDragoon&exclude_pull_requests=true&per_page=5' \
              --no-progress-meter --show-error --fail-with-body)

            # Get the latest run, don't assume the api returns the runs in order and go off the run number
            # Filter only on specific workflows, by ID, because the repo will run other workflows too
            latest_run=$(echo "${response}" | jq '.workflow_runs | map(select(.workflow_id == ${{ env.WORKFLOW_ID }})) | max_by(.run_number)')

            id=$(echo "${latest_run}" | jq -r '.id')
            run_number=$(echo "${latest_run}" | jq -r '.run_number')
            status=$(echo "${latest_run}" | jq -r '.status')
            conclusion=$(echo "${latest_run}" | jq -r '.conclusion')
            html_url=$(echo "${latest_run}" | jq -r '.html_url')
            created_at=$(echo "${latest_run}" | jq -r '.created_at')
            run_attempt=$(echo "${latest_run}" | jq -r '.run_attempt')

            echo "Latest run [#${run_number}]: ${html_url}"
            echo " Status: ${status}, Conclusion: ${conclusion}, Started At: ${created_at}, Run Attempt: ${run_attempt}"

            # Set step outputs to display in the GitHub Summary
            echo "url=${html_url}" >> "$GITHUB_OUTPUT"
            echo "status=${status}" >> "$GITHUB_OUTPUT"
            echo "conclusion=${conclusion}" >> "$GITHUB_OUTPUT"

            if [ "${status}" = 'completed' ]; then
              if [ "${conclusion}" = "success" ]; then
                echo 'Remote Workflow completed successfully.'
                exit 0
              else
                echo 'Remote Workflow completed, but was not successful.'
                exit 1
              fi

            elif [ "${status}" = 'failure' ] || [ "${status}" = 'startup_failure' ]; then
              echo 'Remote Workflow failed.'
              exit 1
            fi

            echo 'Remote Workflow Still Running. Waiting 15 seconds to check again...'
            sleep 15
          done

      - name: Report Remote Workflow Results
        if: success() || failure()
        env:
          URL: ${{ steps.wait-for-remote-workflow.outputs.url }}
          STATUS: ${{ steps.wait-for-remote-workflow.outputs.status }}
          CONCLUSION: ${{ steps.wait-for-remote-workflow.outputs.conclusion }}
        run: |
          echo 'Publishing results to Job Summary...'
          echo '### Remote Workflow Results' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          echo "URL: [${URL}](${URL})" >> $GITHUB_STEP_SUMMARY

          status_icon=':x:'
          if [ "${STATUS}" = 'completed' ]; then
            status_icon=':white_check_mark:'
          fi

          conclusion_icon=':x:'
          if [ "${CONCLUSION}" = 'success' ]; then
            conclusion_icon=':white_check_mark:'
          fi

          echo "Status: ${STATUS} ${status_icon}" >> $GITHUB_STEP_SUMMARY
          echo "Conclusion: ${CONCLUSION} ${conclusion_icon}" >> $GITHUB_STEP_SUMMARY
          echo 'Done. Check the Job Summary for the remote workflow results.'
